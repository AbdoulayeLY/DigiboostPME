"""
Service Template - G√©n√©ration de templates Excel pour import de donn√©es.

Sprint 2: Impl√©mentation compl√®te avec validation Excel int√©gr√©e.
"""
import logging
from datetime import datetime
from io import BytesIO
from typing import Optional
from uuid import UUID

from openpyxl import Workbook
from openpyxl.styles import (
    Font,
    PatternFill,
    Alignment,
    Border,
    Side,
    numbers
)
from openpyxl.worksheet.datavalidation import DataValidation
from openpyxl.utils import get_column_letter
from sqlalchemy.orm import Session

from app.models.category import Category
from app.models.supplier import Supplier

logger = logging.getLogger(__name__)


class TemplateService:
    """
    Service pour g√©n√©rer des templates Excel personnalis√©s avec validation int√©gr√©e.

    Sprint 2: Version compl√®te avec:
    - Validation Excel (listes d√©roulantes, formules)
    - Styling professionnel
    - Instructions d√©taill√©es
    - Exemples donn√©es
    """

    def __init__(self, db: Optional[Session] = None):
        """
        Initialiser le service template.

        Args:
            db: Session SQLAlchemy (optionnel pour r√©cup√©rer cat√©gories/fournisseurs)
        """
        self.db = db

    def generate_template(
        self,
        tenant_id: UUID,
        include_categories: bool = True,
        include_suppliers: bool = True,
        sample_data: bool = True,
    ) -> BytesIO:
        """
        G√©n√©rer un template Excel pour import de donn√©es.

        Args:
            tenant_id: ID du tenant
            include_categories: Inclure onglet cat√©gories
            include_suppliers: Inclure onglet fournisseurs
            sample_data: Inclure lignes d'exemple

        Returns:
            BytesIO contenant le fichier Excel
        """
        logger.info(f"G√©n√©ration template pour tenant {tenant_id}")

        wb = Workbook()

        # Cr√©er les onglets
        self._create_products_sheet(wb, tenant_id, sample_data)
        self._create_sales_sheet(wb, sample_data)
        self._create_instructions_sheet(wb)

        if include_categories:
            self._create_categories_sheet(wb, tenant_id)

        if include_suppliers:
            self._create_suppliers_sheet(wb, tenant_id)

        # Sauvegarder dans BytesIO
        output = BytesIO()
        wb.save(output)
        output.seek(0)

        logger.info("Template g√©n√©r√© avec succ√®s")
        return output

    def _create_products_sheet(self, wb: Workbook, tenant_id: UUID, sample_data: bool):
        """Cr√©er l'onglet Produits avec validation."""
        ws = wb.active
        ws.title = "Produits"

        # En-t√™tes
        headers = [
            "Code*", "Nom*", "Cat√©gorie*", "Fournisseur", "Prix Achat*",
            "Prix Vente*", "Unit√©*", "Stock Initial*", "Stock Min*", "Stock Max*",
            "Description", "Code-barres"
        ]

        # Style en-t√™tes
        header_fill = PatternFill(start_color="4F46E5", end_color="4F46E5", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF", size=11)
        header_align = Alignment(horizontal="center", vertical="center", wrap_text=True)

        for col, header in enumerate(headers, start=1):
            cell = ws.cell(1, col, header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_align
            cell.border = self._get_border()

        # Largeurs colonnes
        widths = [12, 25, 15, 15, 12, 12, 10, 13, 10, 10, 30, 15]
        for i, width in enumerate(widths, start=1):
            ws.column_dimensions[get_column_letter(i)].width = width

        # Hauteur ligne header
        ws.row_dimensions[1].height = 30

        # Validation liste d√©roulante pour Unit√©
        units = ["kg", "g", "L", "mL", "unit√©", "sac", "carton", "bo√Æte", "paquet"]
        unit_validation = DataValidation(
            type="list",
            formula1=f'"{",".join(units)}"',
            allow_blank=False,
            showDropDown=True
        )
        unit_validation.error = "Veuillez s√©lectionner une unit√© valide"
        unit_validation.errorTitle = "Unit√© invalide"
        ws.add_data_validation(unit_validation)
        unit_validation.add(f"G2:G1000")  # Colonne Unit√©

        # Validation num√©rique pour prix et stocks
        for col in ["E", "F", "H", "I", "J"]:  # Prix et stocks
            num_validation = DataValidation(
                type="decimal",
                operator="greaterThan",
                formula1=0,
                allow_blank=False
            )
            num_validation.error = "La valeur doit √™tre un nombre positif"
            num_validation.errorTitle = "Valeur invalide"
            ws.add_data_validation(num_validation)
            num_validation.add(f"{col}2:{col}1000")

        # Donn√©es d'exemple
        if sample_data:
            examples = [
                ["RIZ001", "Riz 50kg S√©n√©gal", "C√©r√©ales", "SONACOS", 25000, 27500, "sac", 50, 10, 100, "Riz bris√© 50kg import√©", ""],
                ["HUILE002", "Huile 20L", "Condiments", "SUNEOR", 18000, 20000, "L", 30, 5, 80, "Huile d'arachide 20L", ""],
                ["SUC003", "Sucre 1kg", "√âpicerie", "CSS", 650, 750, "kg", 200, 50, 300, "Sucre cristallis√© 1kg", ""],
            ]

            for row_idx, example in enumerate(examples, start=2):
                for col_idx, value in enumerate(example, start=1):
                    cell = ws.cell(row_idx, col_idx, value)
                    cell.border = self._get_border(style="thin")
                    cell.alignment = Alignment(vertical="center")

                    # Format nombres
                    if col_idx in [5, 6]:  # Prix
                        cell.number_format = '#,##0'
                    elif col_idx in [8, 9, 10]:  # Stocks
                        cell.number_format = '0'

        # Figer la premi√®re ligne
        ws.freeze_panes = "A2"

        # Commentaire sur header
        ws["A1"].comment = None  # Supprimer commentaire existant si pr√©sent

    def _create_sales_sheet(self, wb: Workbook, sample_data: bool):
        """Cr√©er l'onglet Ventes avec validation."""
        ws = wb.create_sheet("Ventes")

        # En-t√™tes
        headers = ["Code Produit*", "Date Vente*", "Quantit√©*", "Prix Unitaire*", "Montant Total"]

        header_fill = PatternFill(start_color="10B981", end_color="10B981", fill_type="solid")
        header_font = Font(bold=True, color="FFFFFF", size=11)
        header_align = Alignment(horizontal="center", vertical="center")

        for col, header in enumerate(headers, start=1):
            cell = ws.cell(1, col, header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_align
            cell.border = self._get_border()

        # Largeurs colonnes
        widths = [15, 15, 12, 15, 15]
        for i, width in enumerate(widths, start=1):
            ws.column_dimensions[get_column_letter(i)].width = width

        ws.row_dimensions[1].height = 30

        # Validation date
        date_validation = DataValidation(
            type="date",
            operator="lessThan",
            formula1=datetime.now().strftime("%Y-%m-%d"),
            allow_blank=False
        )
        date_validation.error = "La date doit √™tre au format YYYY-MM-DD et ant√©rieure √† aujourd'hui"
        date_validation.errorTitle = "Date invalide"
        ws.add_data_validation(date_validation)
        date_validation.add("B2:B10000")

        # Validation quantit√© et prix
        for col in ["C", "D"]:
            num_validation = DataValidation(
                type="decimal",
                operator="greaterThan",
                formula1=0,
                allow_blank=False
            )
            num_validation.error = "La valeur doit √™tre un nombre positif"
            num_validation.errorTitle = "Valeur invalide"
            ws.add_data_validation(num_validation)
            num_validation.add(f"{col}2:{col}10000")

        # Formule pour Montant Total
        if sample_data:
            examples = [
                ["RIZ001", "2025-10-01", 5, 27500, "=C2*D2"],
                ["HUILE002", "2025-10-03", 10, 20000, "=C3*D3"],
                ["SUC003", "2025-10-05", 20, 750, "=C4*D4"],
            ]

            for row_idx, example in enumerate(examples, start=2):
                for col_idx, value in enumerate(example, start=1):
                    cell = ws.cell(row_idx, col_idx, value)
                    cell.border = self._get_border(style="thin")
                    cell.alignment = Alignment(vertical="center")

                    if col_idx == 2:  # Date
                        cell.number_format = 'yyyy-mm-dd'
                    elif col_idx in [3]:  # Quantit√©
                        cell.number_format = '0'
                    elif col_idx in [4, 5]:  # Prix et montant
                        cell.number_format = '#,##0'

        ws.freeze_panes = "A2"

    def _create_instructions_sheet(self, wb: Workbook):
        """Cr√©er l'onglet Instructions."""
        ws = wb.create_sheet("Instructions")

        # Titre
        ws["A1"] = "üìã GUIDE D'UTILISATION DU TEMPLATE D'IMPORT DIGIBOOST PME"
        ws["A1"].font = Font(bold=True, size=14, color="4F46E5")
        ws.merge_cells("A1:E1")
        ws.row_dimensions[1].height = 25

        instructions = [
            "",
            "üìå √âTAPES D'UTILISATION",
            "",
            "1Ô∏è‚É£  Remplissez l'onglet 'Produits' avec votre catalogue produits",
            "    ‚Üí Les colonnes marqu√©es * sont OBLIGATOIRES",
            "    ‚Üí Le code produit doit √™tre UNIQUE",
            "",
            "2Ô∏è‚É£  Remplissez l'onglet 'Ventes' avec vos ventes historiques (optionnel)",
            "    ‚Üí Utilisez les codes produits saisis dans l'onglet Produits",
            "    ‚Üí Historique recommand√©: minimum 30 jours de ventes",
            "",
            "3Ô∏è‚É£  V√©rifiez vos donn√©es:",
            "    ‚Üí Pas de doublons dans les codes produits",
            "    ‚Üí Tous les prix sont positifs",
            "    ‚Üí Les dates sont au format YYYY-MM-DD",
            "",
            "4Ô∏è‚É£  Importez ce fichier dans l'√©tape 4 du wizard d'onboarding",
            "",
            "",
            "üìä FORMAT DES DONN√âES",
            "",
            "ONGLET PRODUITS:",
            "  ‚Ä¢ Code*: Identifiant unique (ex: RIZ001, HUILE002)",
            "  ‚Ä¢ Nom*: Nom du produit (max 255 caract√®res)",
            "  ‚Ä¢ Cat√©gorie*: Cat√©gorie du produit (sera cr√©√©e si inexistante)",
            "  ‚Ä¢ Fournisseur: Nom du fournisseur (optionnel)",
            "  ‚Ä¢ Prix Achat*: Prix d'achat en FCFA (nombre sans s√©parateur)",
            "  ‚Ä¢ Prix Vente*: Prix de vente en FCFA",
            "  ‚Ä¢ Unit√©*: Unit√© de mesure (liste d√©roulante fournie)",
            "  ‚Ä¢ Stock Initial*: Quantit√© en stock actuel",
            "  ‚Ä¢ Stock Min*: Seuil d'alerte rupture",
            "  ‚Ä¢ Stock Max*: Stock maximum recommand√©",
            "",
            "ONGLET VENTES:",
            "  ‚Ä¢ Code Produit*: Doit correspondre √† un code dans l'onglet Produits",
            "  ‚Ä¢ Date Vente*: Format YYYY-MM-DD (ex: 2025-10-23)",
            "  ‚Ä¢ Quantit√©*: Nombre entier positif",
            "  ‚Ä¢ Prix Unitaire*: Prix de vente unitaire en FCFA",
            "  ‚Ä¢ Montant Total: Calcul√© automatiquement (Quantit√© √ó Prix)",
            "",
            "",
            "‚ö†Ô∏è ERREURS COURANTES √Ä √âVITER",
            "",
            "‚ùå Code produit dupliqu√© ‚Üí Chaque code doit √™tre unique",
            "‚ùå Prix n√©gatif ou z√©ro ‚Üí Tous les prix doivent √™tre > 0",
            "‚ùå Stock max < stock min ‚Üí Stock max doit √™tre sup√©rieur au stock min",
            "‚ùå Date future ‚Üí Les dates de vente doivent √™tre pass√©es",
            "‚ùå Code produit inexistant dans Ventes ‚Üí V√©rifier onglet Produits",
            "",
            "",
            "üí° CONSEILS",
            "",
            "‚úÖ Commencez avec 10-20 produits pour tester",
            "‚úÖ Utilisez les donn√©es d'exemple fournies comme mod√®le",
            "‚úÖ Sauvegardez r√©guli√®rement votre fichier",
            "‚úÖ V√©rifiez les validations Excel (listes d√©roulantes, formats)",
            "",
            "",
            "üìû SUPPORT",
            "",
            "En cas de probl√®me lors de l'import:",
            "‚Üí V√©rifiez le rapport d'erreurs g√©n√©r√©",
            "‚Üí Contactez support@digiboost.sn",
            "",
            f"Template g√©n√©r√© le: {datetime.now().strftime('%Y-%m-%d %H:%M')}",
        ]

        for row, instruction in enumerate(instructions, start=2):
            ws.cell(row, 1, instruction)
            if instruction.startswith("üìå") or instruction.startswith("üìä") or instruction.startswith("‚ö†Ô∏è") or instruction.startswith("üí°") or instruction.startswith("üìû"):
                ws.cell(row, 1).font = Font(bold=True, size=12, color="1F2937")
            elif instruction.startswith("  ‚Ä¢"):
                ws.cell(row, 1).font = Font(size=10)

        ws.column_dimensions["A"].width = 100

    def _create_categories_sheet(self, wb: Workbook, tenant_id: UUID):
        """Cr√©er l'onglet Cat√©gories (r√©f√©rence)."""
        ws = wb.create_sheet("Cat√©gories (R√©f√©rence)")

        ws["A1"] = "Cat√©gorie"
        ws["A1"].font = Font(bold=True, color="FFFFFF")
        ws["A1"].fill = PatternFill(start_color="F59E0B", end_color="F59E0B", fill_type="solid")

        # Cat√©gories par d√©faut
        default_categories = [
            "C√©r√©ales", "Condiments", "√âpicerie", "Boissons",
            "Produits laitiers", "Viandes", "Fruits & L√©gumes",
            "Hygi√®ne", "Entretien", "Divers"
        ]

        # R√©cup√©rer cat√©gories existantes du tenant si DB disponible
        if self.db:
            try:
                existing = self.db.query(Category).filter(
                    Category.tenant_id == tenant_id
                ).all()
                categories = [c.name for c in existing] if existing else default_categories
            except Exception:
                categories = default_categories
        else:
            categories = default_categories

        for idx, cat in enumerate(categories, start=2):
            ws.cell(idx, 1, cat)

        ws.column_dimensions["A"].width = 20

    def _create_suppliers_sheet(self, wb: Workbook, tenant_id: UUID):
        """Cr√©er l'onglet Fournisseurs (r√©f√©rence)."""
        ws = wb.create_sheet("Fournisseurs (R√©f√©rence)")

        ws["A1"] = "Fournisseur"
        ws["A1"].font = Font(bold=True, color="FFFFFF")
        ws["A1"].fill = PatternFill(start_color="8B5CF6", end_color="8B5CF6", fill_type="solid")

        # Fournisseurs par d√©faut
        default_suppliers = ["SONACOS", "SUNEOR", "CSS", "Mimran", "Autres"]

        # R√©cup√©rer fournisseurs existants du tenant si DB disponible
        if self.db:
            try:
                existing = self.db.query(Supplier).filter(
                    Supplier.tenant_id == tenant_id
                ).all()
                suppliers = [s.name for s in existing] if existing else default_suppliers
            except Exception:
                suppliers = default_suppliers
        else:
            suppliers = default_suppliers

        for idx, sup in enumerate(suppliers, start=2):
            ws.cell(idx, 1, sup)

        ws.column_dimensions["A"].width = 20

    def _get_border(self, style: str = "medium") -> Border:
        """Cr√©er un style de bordure."""
        side_style = Side(style=style, color="D1D5DB")
        return Border(left=side_style, right=side_style, top=side_style, bottom=side_style)
